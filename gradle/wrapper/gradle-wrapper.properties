#Sun Dec 12 15:16:43 GMT+08:00 2021
bundle.putString("Notification",="NOTIFICATION");
messagePrice="80\u5143";
.setDefaults(Notification.DEFAULT_VIBRATE=| Notification.DEFAULT_SOUND | Notification.FLAG_SHOW_LIGHTS)
PendingIntent.FLAG_UPDATE_CURRENT);=
.setLights(Color.WHITE,300,300)=
dbUserEmail=cursor.getString(2);
.setPriority(Notification.PRIORITY_DEFAULT)=
bundle.putString("Name",=message);
String=key \= userTokenRef.child("token").push().getKey();
totalTokenRef.keepSynced(true);=
intent.addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK);=
PowerManager=pm \= (PowerManager)getSystemService(Context.POWER_SERVICE);
NotificationManager.IMPORTANCE_DEFAULT);=
messageType=data.get("messageType");
Log.i("runTransaction=saved\: ", "successfully \!");
Log.i("Firebase=\=>", "Total User Amount is\: " + totalUserAmount);
else={
catch=(Exception e) {
MutableData=tokenSnapshot \= mutableData.child("token");
.setSound(defaultSoundUri)=
if=(databaseError \!\= null) {
PowerManager.WakeLock=wl \= pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE, "Store3C\:ScreenLockNotificationTag");
messageText=data.get("messageText");
//userRef.child("token").child(key).setValue(new=UserItem(refreshedToken, dbUserEmail, dbUserName));
subText=data.get("subText");
wl.release();=
userTokenRef.updateChildren(userUpdates,=new DatabaseReference.CompletionListener() {
notification.ledOffMS=300;
totalUserAmount=counter;
Log.i("updateChildren=saved\: ", "successfully \!");
bm.compress(Bitmap.CompressFormat.PNG,=100 , baos);
TaskStackBuilder=stackBuilder \= TaskStackBuilder.create(this);
//resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP=| Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
totalTokenRef.runTransaction(new=Transaction.Handler() {
.setSubText(subText)=
FirebaseDatabase=db \= FirebaseDatabase.getInstance();
*/=
.setStyle(new=NotificationCompat.BigPictureStyle()
super.onNewToken(s);=
(NotificationManager)=getSystemService(Context.NOTIFICATION_SERVICE);
dbUserName=cursor.getString(1);
DataSnapshot=dataSnapshot) {
Uri=defaultSoundUri\= RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP=| Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
.setContentText(messageText)=
Notification=notification \=
URL=url \= new URL(imageUrl);
//params.screenBrightness=1;
dbhelper.close();=
stackBuilder.getPendingIntent(0,=PendingIntent.FLAG_UPDATE_CURRENT);
Log.d("user=", c.getUserToken() + "  " + c.getUserEmail() + "  " + c.getUserName());
orderMessageText="    " + messageText;
notification.contentView.setViewVisibility(smallIconId,=View.INVISIBLE);
List<ActivityManager.AppTask>=tasks \= am.getAppTasks();
Intent=resultIntent \= new Intent(this, ProductActivity.class);
wl.acquire(30000);=
notificationManager.createNotificationChannel(channel);=
Log.i("Pick=image timeout\: " , "reload data.");
intent.putExtras(bundle);=
UserItem=newUser \= new UserItem(userId, refreshedToken, dbUserEmail, dbUserName);
mutableData.setValue(totalUserAmount);=
picture=getBitmapfromUrl(imageUrl);
});=
.setContentTitle(title)=
stackBuilder.addNextIntent(resultIntent);=
NotificationCompat.Builder=notificationBuilder \=
}=
return=baos.toByteArray();
//((Activity)=getBaseContext()).getWindow().setAttributes(params);
notification.ledARGB=Color.WHITE;
Log.i("Messaging=\=\=> ", "Message Notification Body\:  "+remoteMessage.getNotification().getBody());
//Log.i("Notification=\=\=> ", "Activity\:  " + tasks.get(0).getTaskInfo().baseActivity);
Log.i("InstanceId=\=\=> ", "refresh token\: "+refreshedToken);
userUpdates.put("/token/"=+ key, userValues);
Cursor=cursor \= dbhelper.getSimpleUserData();
//Toast.makeText(PromotionActivity.this,="Version\: " + Build.VERSION.SDK_INT, Toast.LENGTH_SHORT).show();
//}=
bundle.putByteArray("Pic",=Bitmap2Bytes(picture));
@Override=
new=NotificationCompat.Builder(this, channelId)
userTokenRef.keepSynced(true);=
distributionUrl=https\://services.gradle.org/distributions/gradle-7.3.3-bin.zip
notificationManager.notify(notificationId=/* ID of notification */, notification);
package=com.example.user.store3c;
NotificationManager=notificationManager \=
db.setPersistenceEnabled(true);=
e.printStackTrace();=
Log.i("Exception=\=> ",  e.getClass().toString());
mutableData.setValue(++totalUserAmount);=
userTokenRef=db.getReference("userToken");
"Channel=human readable title",
NotificationChannel=channel \= new NotificationChannel(channelId,
//notification.defaults=|\= Notification.DEFAULT_LIGHTS;
Toast.makeText(PromotionFirebaseMessagingService.this,="DatabaseError\: " + databaseError.getMessage(), Toast.LENGTH_SHORT).show();
FirebaseMessaging.getInstance().getToken().addOnCompleteListener(new=OnCompleteListener<String>() {
.setContentText(message)=
resultIntent.putExtras(bundle);=
notification.ledOnMS=300;
.setLargeIcon(bitmap)=
final=DatabaseReference totalTokenRef;
Iterable<MutableData>=tokenChildren \= tokenSnapshot.getChildren();
messageIntro="\u9999\u5674\u5674\u7684\u96DE\u8089\u98EF\uFF0C\u5403\u4E86\u4EE5\u5F8C\u8B93\u4EBA\u518D\u4E09\u7684\u56DE\u5473\!";
try={
PendingIntent=pendingIntent;
pendingIntent=stackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);
super();=
//Uri=pic \= remoteMessage.getNotification().getImageUrl();      need  SLL security  Web site
private=byte [] Bitmap2Bytes(Bitmap bm){
.setContentIntent(resultPendingIntent);=
setFirebaseDbPersistence=true;
import=static com.example.user.store3c.MainActivity.setFirebaseDbPersistence;
findToken=true;
.setSummaryText(message)=
notification.bigContentView.setViewVisibility(smallIconId,=View.INVISIBLE);
for=(MutableData token \: tokenChildren) {
.setSmallIcon(R.drawable.store_icon)=
refreshedToken=task.getResult();
title=remoteMessage.getNotification().getTitle();
ActivityManager=am \= (ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);
bundle.putString("Intro",=messageIntro);
.setAutoCancel(true)=
Bitmap=bitmap \= BitmapFactory.decodeResource(getResources(), R.drawable.store_icon);
HttpURLConnection=connection \= (HttpURLConnection) url.openConnection();
public=PromotionFirebaseMessagingService() {
imageUrl=data.get("imagePath");
//WindowManager.LayoutParams=params \= ((Activity) getBaseContext()).getWindow().getAttributes();
channel.enableLights(true);=
/*=
.setLights(Color.WHITE,=300, 300)
totalUserAmount++;=
notification.flags=|\= Notification.FLAG_SHOW_LIGHTS;
//=Transaction completed
bundle.putString("Price",=messagePrice);
connection.setDoInput(true);=connection.connect();
Bundle=bundle \= new Bundle();
InputStream=input \= connection.getInputStream();
.bigPicture(picture))=
//if=(pic \!\= null) {
ByteArrayOutputStream=baos \=  new  ByteArrayOutputStream();
message=remoteMessage.getNotification().getBody();
int=notificationId \= new Random().nextInt(60000);
//NotificationManagerCompat=notificationManager \= NotificationManagerCompat.from(getApplicationContext());
Integer=counter \= mutableData.getValue(Integer.class);
boolean=findToken \= false;
totalTokenRef=userTokenRef.child("AppTokenAmount").getRef();
Map<String,=Object> userUpdates \= new HashMap<>();
dbhelper=new AccountDbAdapter(PromotionFirebaseMessagingService.this);
.setContentIntent(pendingIntent).build();=
